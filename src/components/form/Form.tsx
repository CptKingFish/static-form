import { useEffect } from "react";

import { type z } from "zod";
import Head from "next/head";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";

import { api } from "@/utils/api";
import { type RouterOutputs } from "@/utils/api";
import { generateDynamicFormSchema } from "@/models/Form";
import TextInput from "@/components/form/TextInput";
import EmailInput from "./EmailInput";
import CheckboxInput from "./CheckboxInput";
import RadioInput from "./RadioInput";
import DropdownInput from "./DropdownInput";
import DateInput from "./DateInput";
import TimeInput from "./TimeInput";
import FileInput from "./FileInput";

type FormInputs = Record<string, string | string[] | FileList>;
interface FormPageProps {
  formData: RouterOutputs["form"]["getFormData"];
}

export default function Form({ formData }: FormPageProps) {
  const dynamicFormSchema = generateDynamicFormSchema(formData?.items ?? []);

  const { mutateAsync: submitForm } = api.form.submitForm.useMutation();

  const {
    register,
    handleSubmit,
    reset,
    getValues,
    setValue,

    formState: { errors, isValid, isLoading },
  } = useForm<z.infer<typeof dynamicFormSchema>>({
    reValidateMode: "onSubmit",
    resolver: zodResolver(dynamicFormSchema),
  });

  useEffect(() => {
    if (!formData) return;
    formData.items.forEach((item) => {
      switch (item.type) {
        case "TEXT":
        case "EMAIL":
        case "FILE":
        case "DATE":
        case "TIME":
          setValue(
            item.id as never,
            (item.responses[0]?.response ?? "") as never,
          );
          break;
        case "RADIO":
        case "DROPDOWN":
          setValue(
            item.id as never,
            (item.responses[0]?.options[0]?.id ?? "") as never,
          );
          break;
        case "CHECKBOX":
          setValue(
            item.id as never,
            (item.responses[0]?.options?.map((option) => {
              return option.id;
            }) ?? []) as never,
          );
          break;
        default:
          return null;
      }
    });
  }, []);

  const onSubmit: SubmitHandler<FormInputs> = async (data) => {
    if (!formData || !isValid || isLoading) return;
    console.log("data", data);
    await submitForm(
      {
        formId: formData.id,
        responses: data as Record<string, string | string[]>,
      },
      {
        onSuccess: () => {
          alert("Form submitted successfully!");
        },
        onError: () => {
          alert("Something went wrong!");
        },
      },
    );
    // reset();
  };

  return (
    <>
      <Head>
        <title>Form</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-full flex-col items-center bg-slate-200">
        <>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="mt-8 flex min-w-[50%] flex-col"
          >
            <header className="mb-16 w-full bg-white shadow-sm">
              <div className="px-4 py-4">
                <h1 className="text-lg font-semibold leading-6 text-gray-900">
                  {formData?.name}
                </h1>
              </div>
            </header>

            {formData?.items.map((item, index) => {
              switch (item.type) {
                case "TEXT":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <TextInput
                          key={item.id}
                          id={item.id}
                          index={index}
                          text={item.text}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                case "EMAIL":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <EmailInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                case "CHECKBOX":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <CheckboxInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          options={item.options}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );

                case "RADIO":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <RadioInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          options={item.options}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                case "DROPDOWN":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <DropdownInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          options={item.options}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                case "FILE":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <FileInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          register={register}
                          errors={errors}
                          getValues={getValues}
                          setValue={setValue}
                        />
                      </div>
                    </div>
                  );
                case "DATE":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <DateInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                case "TIME":
                  return (
                    <div
                      key={item.id}
                      className="mb-12 w-full rounded bg-white shadow-sm"
                    >
                      <div className="px-4 py-4">
                        <TimeInput
                          id={item.id}
                          index={index}
                          text={item.text}
                          register={register}
                          errors={errors}
                        />
                      </div>
                    </div>
                  );
                default:
                  return null;
              }
            })}

            <div className="mb-12 w-full">
              <div className="flex justify-between">
                <button
                  type="reset"
                  className="rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                >
                  Reset
                </button>
                <button
                  type="submit"
                  className="rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
                >
                  Submit
                </button>
              </div>
            </div>
          </form>
        </>
      </main>
    </>
  );
}
