import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, SubmitHandler } from "react-hook-form";

import { api } from "@/utils/api";
import { RouterOutputs } from "@/utils/api";
import { getSession } from "next-auth/react";
// import { DynamicFormData, formSchema } from "@/models/Form";
import { generateDynamicFormSchema } from "@/models/Form";
import { GetServerSidePropsContext } from "next";
import { db } from "@/server/db";
import TextInput from "@/components/form/TextInput";
import Form from "@/components/form/Form";
import { useEffect, useState } from "react";

// type FormInputs = {
//   name: string;
//   email: string;
//   occupation: string[];
//   gender: string;
//   country: string;
//   file: FileList;
//   date: string;
//   time: string;
// };

interface FormPageProps {
  formId: string | undefined;
  // formData: RouterOutputs["form"]["getFormData"];
}

export default function FormPage({ formId }: FormPageProps) {
  const {
    data: formData,
    isLoading,
    isError,
    error,
    isFetched,
  } = api.form.getFormData.useQuery(
    {
      formId: formId ?? "",
    },
    {
      enabled: !!formId,
    },
  );

  return (
    <>
      <Head>
        <title>Form</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-slate-200">
        {formData ? <Form formData={formData} /> : null}
      </main>
    </>
  );
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  const formId = ctx.params?.formId;
  const session = await getSession(ctx);

  return {
    props: {
      formId,
      // formData,
    },
  };
};
